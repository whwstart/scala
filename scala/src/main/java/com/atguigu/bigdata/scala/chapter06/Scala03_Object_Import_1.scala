package com.atguigu.bigdata.scala.chapter06

object Scala03_Object_Import_1 {

    def main(args: Array[String]): Unit = {

        // TODO 面向对象编程
        // 如果自定义的类和JDK的类相同，怎么办？
        // JVM会加载JDL自带的类，不会加载自定义的类
        // JVM采用一种特殊的处理机制：双亲委派机制（类加载器）
        // Java中默认有3个类加载器
        // 1. 启动类加载器 => JDK启动类库 (java.lang.String)
        // 2. 扩展类加载器 => JDK扩展类库 (java.lang.String)
        // 3. 应用类加载器 => classpath中的类 (java.lang.String)
        // TODO 双亲委派机制（类加载器）
        // 1. 应用类加载器在加载一个类的时候，不会马上加载
        // 2. 委托（委派）上一级类加载器（父亲）执行加载
        // 3. 扩展类加载器 在加载一个类的时候，不会马上加载
        // 4. 委托（委派）上一级类加载器（父亲）执行加载
        // 5. 【启动类加载器】加载这个类，如果加载到，那么直接放在方法区内存中，加载过程结束
        // 6. 如果加载不到，会返回null，让下一级类加载器加载
        // 7. 【扩展类加载器】加载这个类，如果加载到，那么直接放在方法区内存中，加载过程结束
        // 8. 如果加载不到，会抛出异常，抛给下一级类加载器
        // 9. 应用类加载器捕捉这个异常，尝试进行加载类，如果加载到，那么直接放在方法区内存中，加载过程结束
        // 10. 如果加载不到，会将捕捉的异常直接抛出给JVM

    }
}
